*This program is generated by cleans_all_standard_csmar_datasets.sas;

%macro cleans_csmar_compressed_sas_ds;


   libname source "/wrds/csmar/rawdata/2025/extracted/analysts_forecast/sqlserver_into_sas/compressed/";
   libname output "/wrds/csmar/sasdata/af/";

        /* removes data file and index file before creating any new files to avoid warnings */ 
        x 'rm -fv /wrds/csmar/sasdata/af/af_actual.sas7bndx';
        x 'rm -fv /wrds/csmar/sasdata/af/af_actual.sas7bdat';

        /* converts char type important date variable Ddate  
           into numeric format if there is any.
           creates a new string variable Ddate_str to store  
           the complete info in Ddate 
           note: datasets with important date variables that are year, month or 
                 week variables have important_datevar set to                   
                 'no_important_datevar' in rawsas.csmar_dd_table_level.         
                 So, we do not need to treat them as date variables here.       
           converts important date variables from 8. to YYMMDDN8., 
           Some parts of the dates may be missing and set to 00, SAS will not   
           be able to save them as date variables.
           To solve this problem, we will replace those missing dates as:
               .N  if the original value is 0,                               
               .Y  if the year is missing in the original value              
               .M  if the month is missing in the original value             
               .D  if the day is missing in the original value               
           a temporary variable Ddate_new is used.    
        */ 
        data temp;
            set source.af_actual;
            %if "Ddate" ne "no_important_datevar"
            %then %do;
                if vtype(Ddate) = 'C' then do;
                    *create Ddate_str;
                    Ddate_str = compress(Ddate, '- ');
                end;
                else if vtype(Ddate) = 'N' then do;
                    Ddate_str = cats('',Ddate);
                end;
                yy = substr(Ddate_str, 1, 4);
                mm = substr(Ddate_str, 5, 2);
                dd = substr(Ddate_str, 7, 2);
                *create Ddate_new from Ddate_str;
                if Ddate_str = '0' then Ddate_new = .N;
                else if yy = '0000' then Ddate_new = .Y;
                else if mm = '00' then Ddate_new = .M;
                else if dd = '00' then Ddate_new = .D;
                else Ddate_new = input(Ddate_str,yymmdd8.);
                drop yy mm dd; 
                drop Ddate;
                format Ddate_new yymmddn8.;
                label Ddate_str = "str format of Ddate (added by WRDS)";
                rename Ddate_new = Ddate;
            %end;
        run;

        /* sorts data by primary keys, compresses char */ 
        proc sort data=temp out=output.af_actual(compress=char) force;
            by Ddate Stkcd;
        run;

        /* adds dataset label, indexes on primary keys, adds variable labels */ 
        proc datasets library=output nolist;
            modify af_actual (label="Actual Indicators");
            index create Ddate Stkcd;
            label
                stkcd = "Stock Code "
                ddate = "Reporting Term "
                meps = "Earnings Per Share "
                mpe = "P/E Ratio "
                mnetpro = "Net Profit "
                mebit = "Ebit "
                mebitda = "EBITDA "
                mturnover = "Income from Main business "
                mcfps = "Cash Flow from Operations per Share "
                bm = "Book to Market Ratio "
                bps = "Book Value Per Share "
                roa = "Return on Total Assets "
                roe = "Rate of Return on Common Stockholders  Equity "
                pb = "P/B Ratio "
                totalassetsturnover = "Turnover Rate of Total Assets "
            ;
        quit;



   libname source "/wrds/csmar/rawdata/2025/extracted/analysts_forecast/sqlserver_into_sas/compressed/";
   libname output "/wrds/csmar/sasdata/af/";

        /* removes data file and index file before creating any new files to avoid warnings */ 
        x 'rm -fv /wrds/csmar/sasdata/af/af_anaforefeature.sas7bndx';
        x 'rm -fv /wrds/csmar/sasdata/af/af_anaforefeature.sas7bdat';

        /* converts char type important date variable Rptdt  
           into numeric format if there is any.
           creates a new string variable Rptdt_str to store  
           the complete info in Rptdt 
           note: datasets with important date variables that are year, month or 
                 week variables have important_datevar set to                   
                 'no_important_datevar' in rawsas.csmar_dd_table_level.         
                 So, we do not need to treat them as date variables here.       
           converts important date variables from 8. to YYMMDDN8., 
           Some parts of the dates may be missing and set to 00, SAS will not   
           be able to save them as date variables.
           To solve this problem, we will replace those missing dates as:
               .N  if the original value is 0,                               
               .Y  if the year is missing in the original value              
               .M  if the month is missing in the original value             
               .D  if the day is missing in the original value               
           a temporary variable Rptdt_new is used.    
        */ 
        data temp;
            set source.af_anaforefeature;
            %if "Rptdt" ne "no_important_datevar"
            %then %do;
                if vtype(Rptdt) = 'C' then do;
                    *create Rptdt_str;
                    Rptdt_str = compress(Rptdt, '- ');
                end;
                else if vtype(Rptdt) = 'N' then do;
                    Rptdt_str = cats('',Rptdt);
                end;
                yy = substr(Rptdt_str, 1, 4);
                mm = substr(Rptdt_str, 5, 2);
                dd = substr(Rptdt_str, 7, 2);
                *create Rptdt_new from Rptdt_str;
                if Rptdt_str = '0' then Rptdt_new = .N;
                else if yy = '0000' then Rptdt_new = .Y;
                else if mm = '00' then Rptdt_new = .M;
                else if dd = '00' then Rptdt_new = .D;
                else Rptdt_new = input(Rptdt_str,yymmdd8.);
                drop yy mm dd; 
                drop Rptdt;
                format Rptdt_new yymmddn8.;
                label Rptdt_str = "str format of Rptdt (added by WRDS)";
                rename Rptdt_new = Rptdt;
            %end;
        run;

        /* sorts data by primary keys, compresses char */ 
        proc sort data=temp out=output.af_anaforefeature(compress=char) force;
            by ReportID;
        run;

        /* adds dataset label, indexes on primary keys, adds variable labels */ 
        proc datasets library=output nolist;
            modify af_anaforefeature (label="Characteristic Indicators of Analyst Forecast");
            index create ReportID;
            label
                ananmid = "Analyst ID "
                declaredate = "Release Date "
                ananm = "Analyst Name "
                institutionid = "Securities Company ID "
                brokern = "Securities Company Name "
                stkcd = "Stock code "
                stknmec = "Stock Acronym "
                reportid = "ReportID "
                rptdt = "Report Release Day "
                relativeanaexperience = "Relative Working Experience "
                relativeconumber = "Relative Forecasted Company Number "
                relativenumber = "Relative Forecasting Number "
                relativeaccuracy = "Relative Forecasting Accuracy "
                relativeoptimism = "Relative Optimistic Degree "
                relativerecommendation = "Relative Recommendation "
                relativeforecasthorizon = "Relative Forecasting Range "
            ;
        quit;





... (Note!!! This is just the sample/demo version.  The code here was removed.)




   libname source "/wrds/csmar/rawdata/2025/extracted/stock_trading/sqlserver_into_sas/compressed/";
   libname output "/wrds/csmar/sasdata/trading/";

        /* removes data file and index file before creating any new files to avoid warnings */ 
        x 'rm -fv /wrds/csmar/sasdata/trading/trd_yearm.sas7bndx';
        x 'rm -fv /wrds/csmar/sasdata/trading/trd_yearm.sas7bdat';

        /* converts char type important date variable no_important_datevar  
           into numeric format if there is any.
           creates a new string variable no_important_datevar_str to store  
           the complete info in no_important_datevar 
           note: datasets with important date variables that are year, month or 
                 week variables have important_datevar set to                   
                 'no_important_datevar' in rawsas.csmar_dd_table_level.         
                 So, we do not need to treat them as date variables here.       
           converts important date variables from 8. to YYMMDDN8., 
           Some parts of the dates may be missing and set to 00, SAS will not   
           be able to save them as date variables.
           To solve this problem, we will replace those missing dates as:
               .N  if the original value is 0,                               
               .Y  if the year is missing in the original value              
               .M  if the month is missing in the original value             
               .D  if the day is missing in the original value               
           a temporary variable no_important_datevar_new is used.    
        */ 
        data temp;
            set source.trd_yearm;
            %if "no_important_datevar" ne "no_important_datevar"
            %then %do;
                if vtype(no_important_datevar) = 'C' then do;
                    *create no_important_datevar_str;
                    no_important_datevar_str = compress(no_important_datevar, '- ');
                end;
                else if vtype(no_important_datevar) = 'N' then do;
                    no_important_datevar_str = cats('',no_important_datevar);
                end;
                yy = substr(no_important_datevar_str, 1, 4);
                mm = substr(no_important_datevar_str, 5, 2);
                dd = substr(no_important_datevar_str, 7, 2);
                *create no_important_datevar_new from no_important_datevar_str;
                if no_important_datevar_str = '0' then no_important_datevar_new = .N;
                else if yy = '0000' then no_important_datevar_new = .Y;
                else if mm = '00' then no_important_datevar_new = .M;
                else if dd = '00' then no_important_datevar_new = .D;
                else no_important_datevar_new = input(no_important_datevar_str,yymmdd8.);
                drop yy mm dd; 
                drop no_important_datevar;
                format no_important_datevar_new yymmddn8.;
                label no_important_datevar_str = "str format of no_important_datevar (added by WRDS)";
                rename no_important_datevar_new = no_important_datevar;
            %end;
        run;

        /* sorts data by primary keys, compresses char */ 
        proc sort data=temp out=output.trd_yearm(compress=char) force;
            by Trdynt Markettype;
        run;

        /* adds dataset label, indexes on primary keys, adds variable labels */ 
        proc datasets library=output nolist;
            modify trd_yearm (label="Annual Market Returns");
            index create Trdynt Markettype;
            label
                markettype = "Market Type "
                trdynt = "Trading Year "
                ndaytrd = "Annual Number Of Trading Days "
                ynshrtrdtl = "Annual Trading Volume "
                ynvaltrdtl = "Annual Trading Turnover "
                yretwdeq = "Annual Market Returns With Cash Dividend Reinvested (Equal-Weighted) "
                yretmdeq = "Annual Market Returns Without Cash Dividend Reinvested (Equal-Weighted) "
                yretwdos = "Annual Market Returns With Cash Dividend Reinvested (Current-Value-Weighted) "
                yretmdos = "Annual Market Returns Without Cash Dividend Reinvested (Current-Value-Weighted) "
                yretwdtl = "Annual Market Returns With Cash Dividend Reinvested (Total-Value-Weighted) "
                yretmdtl = "Annual Market Returns Without Cash Dividend Reinvested (Total-Value-Weighted) "
                ynstkcal = "Number Of Companies Included In Calculation Of Annual Market Returns "
                ymvosd = "Annual Negotiable Market Capitalization "
                ymvttl = "Annual Market Capitalization "
            ;
        quit;


%mend cleans_csmar_compressed_sas_ds;

%cleans_csmar_compressed_sas_ds;

